version: 2.1
executors:
  web-executor:
    docker:
      - image: cimg/node:14.17.6
  e2e-executor:
    docker:
      - image: mcr.microsoft.com/playwright:v1.52.0-noble
  terraform-executor:
    docker:
      - image: hashicorp/terraform:1.3.6
commands:
  build_web:
    parameters:
      api_domain:
        type: string
        description: ttbud backend API domain
    steps:
      - install_yarn_deps:
          cache_prefix: web
      - run:
          name: Build
          environment:
            REACT_APP_DOMAIN: << parameters.api_domain >>
            REACT_APP_API_WEBSOCKET_PORT: 443
          command: yarn build
      - run:
          name: Package
          command: tar -czvf /tmp/ttbud-web.tar.gz --directory=build .
      - store_artifacts:
          path: /tmp/ttbud-web.tar.gz
          destination: ttbud-web.tar.gz
      - run:
          name: Save build tarball URL
          command: ../infra/get_ci_artifact $CIRCLE_BUILD_NUM ttbud-web.tar.gz > /tmp/web-tarball-url
      - persist_to_workspace:
          root: /tmp
          paths:
            - web-tarball-url
  release:
    parameters:
      workspace:
        type: string
        description: Terraform workspace to deploy
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Apply Release
          environment:
            DEPLOY_WORKSPACE: << parameters.workspace >>
          command: |
            DEPLOY_COMMIT_HASH="$CIRCLE_SHA1" \
            DEPLOY_TF_TOKEN="$TERRAFORM_TOKEN" \
            DEPLOY_WEB_TARBALL_URL="$(cat /tmp/workspace/web-tarball-url)" \
            DEPLOY_API_TARBALL_URL="https://api.github.com/repos/ttbud/ttbud/tarball/${CIRCLE_SHA1}" \
            ./do_deploy
  install_yarn_deps:
    description: "Install all yarn dependencies"
    parameters:
      cache_prefix:
        type: string
    steps:
      - restore_cache:
          keys:
            # Restore the cache with the exact dependencies,
            - << parameters.cache_prefix >>-deps-v5-{{ checksum "yarn.lock" }}
            # or, failing that, just the most recent cache entry
            - << parameters.cache_prefix >>-deps-v5
      - run:
          name: Install Deps
          command: yarn install
      - save_cache:
          key: << parameters.cache_prefix >>-deps-v5-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
jobs:
  api:
    docker:
      - image: cimg/python:3.10.8
    working_directory: ~/repo/api
    steps:
      - setup_remote_docker:
          version: docker24
      - checkout:
          path: ~/repo
      - restore_cache:
          keys:
            # Restore the cache with the exact dependencies,
            - api-deps-v3-{{ checksum "uv.lock" }}
            # or, failing that, just the most recent cache entry
            - api-deps-v3
      - run:
          name: Install uv
          command: curl -LsSf https://astral.sh/uv/0.6.16/install.sh | sh
      - run:
          name: Install Deps
          command: uv sync
      - save_cache:
          key: api-deps-v3-{{ checksum "uv.lock" }}
          paths:
            - .venv
      - run:
          name: Check Code Format
          command: uv run black -S src tests load main.py --check
      - run:
          name: Typecheck
          command: uv run mypy src tests load main.py
      - run:
          name: Lint
          command: uv run flake8 src tests load main.py
      - run:
          name: Run Tests
          command: uv run pytest tests --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results
  web:
    executor: web-executor
    working_directory: ~/repo/web
    steps:
      - checkout:
          path: ~/repo
      - install_yarn_deps:
          cache_prefix: web
      - run:
          name: Check Style
          command: yarn run checkstyle
      - run:
          name: Typecheck
          command: yarn run typecheck
      - run:
          name: Lint
          command: yarn run lint
      - run:
          name: Run Tests
          environment:
            - JEST_JUNIT_OUTPUT_DIR: test-results
            - REACT_APP_DOMAIN: localhost
            - REACT_APP_API_WEBSOCKET_PORT: 1234
          # Have to manually set max workers because jest detects the wrong
          # number of cpu cores in circleci
          # https://github.com/facebook/jest/issues/5239#issuecomment-355867359
          command: yarn run test --reporters=default --reporters=jest-junit --maxWorkers=2
      - store_test_results:
          path: test-results
  build-staging-web:
    executor: web-executor
    working_directory: ~/repo/web
    steps:
      - checkout:
          path: ~/repo
      - build_web:
          api_domain: ttbud-staging.herokuapp.com
  build-prod-web:
    executor: web-executor
    working_directory: ~/repo/web
    steps:
      - checkout:
          path: ~/repo
      - build_web:
          api_domain: ttbud-prod.herokuapp.com
  release-staging:
    executor: terraform-executor
    working_directory: ~/repo/infra
    steps:
      - checkout:
          path: ~/repo
      - release:
          workspace: staging
  release-prod:
    executor: terraform-executor
    working_directory: ~/repo/infra
    steps:
      - checkout:
          path: ~/repo
      - release:
          workspace: prod
  terraform-lint:
    executor: terraform-executor
    working_directory: ~/repo/infra
    steps:
      - checkout:
          path: ~/repo
      - run:
          name: Check Style
          command: terraform fmt -check -recursive
  e2e-lint:
    executor: e2e-executor
    working_directory: ~/repo/e2e
    steps:
      - checkout:
          path: ~/repo
      - install_yarn_deps:
          cache_prefix: e2e
      - run:
          name: Typecheck
          command: yarn run typecheck
      - run:
          name: Check Style
          command: yarn run checkstyle
  e2e-staging:
    executor: e2e-executor
    working_directory: ~/repo/e2e
    steps:
      - checkout:
          path: ~/repo
      - install_yarn_deps:
          cache_prefix: e2e
      - run:
          name: Run Integration Tests
          environment:
            DOMAIN: https://ttbud-staging.netlify.app
            API_DOMAIN: wss://ttbud-staging.herokuapp.com
          # Sometimes both browsers fail to start if we start more than one at a time
          command: yarn test --workers=1 --forbid-only
      - store_artifacts:
          path: ~/repo/e2e/test-results

# Github requires the merge queue jobs and the PR jobs to be exactly the same.
# We only want to run certain jobs on the merge queue, so this will skip the
# rest of the steps in a job if we're not in the merge queue branch
# The exception is the trying branch, which can be used to try something in
# staging without fully releasing it
exit_if_not_merge_queue: &EXIT_IF_NOT_MERGE_QUEUE
  pre-steps:
    - run:
        name: Skip unless on gh-readonly-queue/master*
        # Specify a working directory so that this doesn't cause any directories
        # to be created in jobs that have a working directory specified before
        # the checkout happens
        working_directory: /tmp
        command: |
          case "$CIRCLE_BRANCH" in
            trying|gh-readonly-queue/master*) ;;
            *) 
              echo "Skipping job because branch is not trying or gh-readonly-queue/master*"
              circleci-agent step halt
              ;;
          esac
default-filter: &DEFAULT_FILTER
  filters:
    branches:
      ignore:
        # We don't need to run unit tests on master, because the merge queue
        # ensures they've been run before making it to master
        - master
workflows:
  version: 2
  all:
    jobs:
      - api:
          <<: *DEFAULT_FILTER
      - web:
          <<: *DEFAULT_FILTER
      - e2e-lint:
          <<: *DEFAULT_FILTER
      - terraform-lint:
          <<: *DEFAULT_FILTER
      - build-staging-web:
          <<: *EXIT_IF_NOT_MERGE_QUEUE
      - release-staging:
          requires:
            - build-staging-web
          <<: *EXIT_IF_NOT_MERGE_QUEUE
      - e2e-staging:
          requires:
            - release-staging
          <<: *EXIT_IF_NOT_MERGE_QUEUE
      - build-prod-web:
          filters:
            branches:
              only: master
      - release-prod:
          serial-group: << pipeline.project.slug >>/deploy-prod
          requires:
            - build-prod-web
          filters:
            branches:
              only: master
