version: 2.1
orbs:
  heroku: circleci/heroku@1.2.6
executors:
  web-executor:
    resource_class: medium
    docker:
      - image: cimg/node:16.10.0
  e2e-executor:
    docker:
      - image: mcr.microsoft.com/playwright:focal
commands:
  install_yarn_deps:
    description: "Install all yarn dependencies"
    parameters:
      cache_prefix:
        type: string
    steps:
      - restore_cache:
          keys:
            # Restore the cache with the exact dependencies,
            - << parameters.cache_prefix >>-deps-v5-{{ checksum "yarn.lock" }}
            # or, failing that, just the most recent cache entry
            - << parameters.cache_prefix >>-deps-v5
      - run:
          name: Install Deps
          command: yarn install
      - save_cache:
          key: << parameters.cache_prefix >>-deps-v5-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  release_web:
    parameters:
      target_name:
        type: string
      site_id:
        type: env_var_name
    steps:
      - checkout:
          path: ~/repo
      - install_yarn_deps:
          cache_prefix: web
      - run:
          name: Build Bundle
          command: yarn build
      - run:
          name: Release to << parameters.target_name >>
          command: web/node_modules/.bin/netlify deploy --site $<< parameters.site_id >> --auth $NETLIFY_AUTH_TOKEN --prod
          working_directory: ~/repo
  release_api:
    parameters:
      app_name:
        type: string
    steps:
      - checkout
      - heroku/install
      - heroku/deploy-via-git:
          app-name: << parameters.app_name >>
          # Bors force pushes to the staging branch for each build, so we have to push force to heroku
          force: true
jobs:
  api:
    docker:
      - image: cimg/base:2021.07
    working_directory: ~/repo/api
    environment:
      # Enable the legacy docker client for localstack
      # The Sdk docker client crashes if docker isn't available, even though it's just checking for a container name,
      # which is not necessary to run the tests
      # https://github.com/localstack/localstack/issues/4692
      LEGACY_DOCKER_CLIENT: "true"
    steps:
      - checkout:
          path: ~/repo
      - setup_remote_docker:
          version: 20.10.6
      - run:
          name: Sign in to Docker Hub
          command: docker login -u ${DOCKER_USERNAME} -p ${DOCKER_ACCESS_TOKEN}
      - run:
          name: Build api Docker image
          command: ./build_image_ci ttbud/api
      - run:
          name: Check Code Format
          command: docker run ttbud/api black -S src tests load main.py --check
      - run:
          name: Typecheck
          command: docker run ttbud/api mypy src tests load main.py
      - run:
          name: Lint
          command: docker run ttbud/api flake8 src tests load main.py
      - run:
          name: Run Tests
          command: |
            docker run --env LEGACY_DOCKER_CLIENT --name api-tests ttbud/api pytest tests --junitxml=test-results/junit.xml
      - run:
          name: Extract Test Results
          command: |
            mkdir -p test-results
            docker cp api-tests:/home/appuser/app/test-results/junit.xml test-results/junit.xml
      - store_test_results:
          path: test-results
  web:
    executor: web-executor
    working_directory: ~/repo/web
    steps:
      - checkout:
          path: ~/repo
      - install_yarn_deps:
          cache_prefix: web
      - run:
          name: Check Style
          command: yarn run checkstyle
      - run:
          name: Typecheck
          command: yarn run typecheck
      - run:
          name: Lint
          command: yarn run lint
      - run:
          name: Run Tests
          environment:
            - JEST_JUNIT_OUTPUT_DIR: test-results
            - REACT_APP_DOMAIN: localhost
            - REACT_APP_API_WEBSOCKET_PORT: 1234
          # Have to manually set max workers because jest detects the wrong
          # number of cpu cores in circleci
          # https://github.com/facebook/jest/issues/5239#issuecomment-355867359
          command: yarn run test --reporters=default --reporters=jest-junit --maxWorkers=2
      - store_test_results:
          path: test-results
  release-staging-web:
    executor: web-executor
    working_directory: ~/repo/web
    environment:
      REACT_APP_DOMAIN: ttbud-staging.herokuapp.com
      REACT_APP_API_WEBSOCKET_PORT: 443
    steps:
      - release_web:
          target_name: Staging
          site_id: NETLIFY_STAGING_SITE_ID
  release-prod-web:
    executor: web-executor
    working_directory: ~/repo/web
    environment:
      REACT_APP_DOMAIN: ttbud.herokuapp.com
      REACT_APP_API_WEBSOCKET_PORT: 443
    steps:
      - release_web:
          target_name: Prod
          site_id: NETLIFY_PROD_SITE_ID
  release-staging-api:
    executor: heroku/default
    steps:
      - release_api:
          app_name: ttbud-staging
  release-prod-api:
    executor: heroku/default
    steps:
      - release_api:
          app_name: ttbud
  e2e-lint:
    executor: e2e-executor
    working_directory: ~/repo/e2e
    steps:
      - checkout:
          path: ~/repo
      - install_yarn_deps:
          cache_prefix: e2e
      - run:
          name: Typecheck
          command: yarn run typecheck
      - run:
          name: Check Style
          command: yarn run checkstyle
  e2e-staging:
    executor: e2e-executor
    working_directory: ~/repo/e2e
    steps:
      - checkout:
          path: ~/repo
      - install_yarn_deps:
          cache_prefix: e2e
      - run:
          name: Run Integration Tests
          environment:
            DOMAIN: https://ttbud-staging.netlify.app
            API_DOMAIN: wss://ttbud-staging.herokuapp.com
          # Sometimes both browsers fail to start if we start more than one at a time
          command: yarn test --workers=1 --forbid-only
      - store_artifacts:
          path: ~/repo/e2e/test-results

default-filter: &DEFAULT_FILTER
  filters:
    branches:
      ignore:
        # bors ng uses these branches to stage merges for pending PRs, they
        # shouldn't be built until bors moves them to the "staging" branch
        # https://bors.tech/documentation/getting-started/
        - staging.tmp
        - trying.tmp
        - staging-squash-merge.tmp
        # We don't need to run unit tests on master, because bors ensures
        # they ran on the same commit in staging
        - master
workflows:
  version: 2
  all:
    jobs:
      - api:
          <<: *DEFAULT_FILTER
      - web:
          <<: *DEFAULT_FILTER
      - e2e-lint:
          <<: *DEFAULT_FILTER
      - release-staging-web:
          requires:
            - web
          filters:
            branches:
              only:
                - staging
                - trying
      - release-staging-api:
          requires:
            - api
          filters:
            branches:
              only:
               - staging
               - trying
      - e2e-staging:
          requires:
            - release-staging-api
            - release-staging-web
      - release-prod-web:
          filters:
            branches:
              only: master
      - release-prod-api:
          filters:
            branches:
              only: master
